[{"uri":"/1-introduce/","title":"Introduction","tags":[],"description":"","content":"Deploying an E-Commerce Website on the AWS (Amazon Web Services) platform by integrating various cloud services such as EC2, S3, RDS, Route 53, and Elastic IP. This deployment model enables the website to operate with high stability, security, scalability, and cost efficiency, while leveraging the power of AWS infrastructure to achieve optimal performance in real-world environments.\nBy deploying on AWS, you gain the following benefits:\nHigh performance and flexible computing power on the cloud (EC2, RDS) Easily scalable infrastructure to match demand (Auto Scaling, RDS scaling) High reliability and availability (S3 offers 99.999999999% durability, fast DNS resolution with Route 53) Strong security with IAM, VPC, data encryption, and access control Easy management and configuration (user-friendly interfaces and powerful APIs) Cost optimization, especially with the Free Tier (EC2 750h, S3, RDS) Flexible, secure, and durable storage for data and static assets (S3) Professional domain management and smart routing (Route 53) Maintain a fixed IP address for your server, making domain pointing easier (Elastic IP) Fast deployment support for full-stack web applications These advantages demonstrate that deploying using these AWS technologies is both exciting and highly practical.\n"},{"uri":"/2-prerequiste/2.1-createec2/2.1.1-createvpc/","title":"Create VPC","tags":[],"description":"","content":"Create VPC – VPC Lab Access the VPC Management Console\nClick on Your VPCs. Check if a default VPC already exists.\nIf not, follow the referenced lab in the previous section to create one.\nIn this workshop, we will use the default VPC. "},{"uri":"/3-deploy-web-to-aws/3.1-uploadtos3/","title":"Deploy Source to S3","tags":[],"description":"","content":" Go to the created bucket and click Upload. On the upload page: Click Add files. Then upload the packaged file from the previous section. Once the file is selected, its information will be displayed. Then click Upload to start uploading the file. Once the upload is successful, the status will be Succeeded. Click on the uploaded file to view detailed properties. View the permissions of the bucket that contains the uploaded file. Click on the uploaded file, then click on Permissions to view its access settings. Click Object actions on the right side. Then select Share with a presigned URL. The Share with a presigned URL screen will appear: Select Minutes. Enter 45 in the Number of minutes field. Click Create presigned URL. A notification will appear. Click Copy presigned URL to save the link to the uploaded file. You’ve now completed the first step of deploying your web application to AWS.\n"},{"uri":"/","title":"Deploying a Full-Stack E-Commerce Application for Electronics using AWS","tags":[],"description":"","content":"Deploying a Full-Stack E-Commerce Application for Electronics using AWS Overview There are many different ways to deploy a full-stack E-Commerce website focused on electronics. AWS is an excellent solution to bring our project to life.\nIn this workshop, we will deploy the application on AWS using services such as EC2, S3, RDS, Route 53, and more.\nBelow is a sample architecture of a full-stack E-Commerce website for electronics deployed on AWS.\nTable of Contents Introduction Preparation Steps Deployment Conclusion and Future Development Clean Up Resources "},{"uri":"/2-prerequiste/2.1-createec2/","title":"Prepare VPC and EC2","tags":[],"description":"","content":"In this step, we will create a VPC and an EC2 instance.\nTo optimize and save costs during this workshop, we will use a Free Tier eligible EC2 instance.\nContents Create VPC Create EC2 "},{"uri":"/3-deploy-web-to-aws/3.2-configec2/","title":"Configuring EC2 and Connecting to S3","tags":[],"description":"","content":" Access the created EC2 instance and click Copy the Public IPv4 address Open CMD, navigate to the directory containing the EC2 keypair, and execute the following code to SSH into the EC2 instance: ssh -i \u0026#34;your-keypair.pem\u0026#34; ec2-user@\u0026lt;EC2-PUBLIC-IP\u0026gt; Copy the S3 object URL of the uploaded JAR file Configure the file path\nClick the Copy icon to copy the path Enter the command below to download the JAR file from S3 to EC2 pwd \u0026#39;links3\u0026#39; Wait for the download to complete. A 100% progress notification will appear in CMD Run the following command to rename the file mv \u0026#39;namefile\u0026#39; newName ls Install Java 22 using the command below sudo yum install java-22 ls Wait for Java 22 to be installed on the EC2 instance Proceed with the following steps to run the web application Verify the Java version Launch the application java -version java -jar DASpring.jar ls Check the running application’s details Add a port to the inbound rules in the EC2 security group. Click add Rule Select \u0026ldquo;Custom TCP\u0026rdquo; from the rule type dropdown Enter port 8080 in the port range field Set source to \u0026ldquo;Anywhere\u0026rdquo; (0.0.0.0/0 for IPv4) Click \u0026ldquo;Save rules\u0026rdquo; to apply the changes Congratulations! You’ve completed deploying the E-Commerce Full-Stack application (specializing in electronics) on AWS. In the next section, we’ll test the deployed web application.\n"},{"uri":"/2-prerequiste/2.1-createec2/2.1.2-createec2/","title":"Create EC2","tags":[],"description":"","content":"Create EC2 Go to the EC2 Management Console Click Instances Click Launch instances On the Launch instance page: Under Name and tags, enter the EC2 name as MyElectronicShop In the Application and OS Images (Amazon Machine Image) section, choose Amazon Linux under Quick Start Scroll to the Amazon Machine Image (AMI) section, and select\nAmazon Linux 2023 kernel-6.1 AMI Scroll to the Key pair (login) section and click Create new key pair Enter the Key pair name as ElectronicShopKeypairEC2 Choose Key pair type: RSA Choose Private key file format: .pem Click Create key pair Scroll to the Network settings section and configure as follows: Click Create security group under Firewall (security groups) Choose Allow SSH traffic from For Allow SSH traffic from, select Anywhere Click Launch instance After successfully launching the instance, go back to the Instances section: You will see the Instance state as running Click on the Instance ID to view detailed information about the created EC2 Scroll down to the Security tab to view details about Inbound rules and Outbound rules "},{"uri":"/2-prerequiste/2.2-creates3/","title":"Create S3","tags":[],"description":"","content":"Create S3 In this step, we will create an S3 bucket.\nThis prepares us for the next step, where we will upload the .jar file of the source code to S3.\nGo to the S3 Management Console Click Create bucket Under Bucket type, configure the following: Select General purpose Set the Bucket name to mySpringbootApp In the Bucket Versioning section, choose Disable\nIn the Default encryption section, choose\nServer-side encryption with Amazon S3 managed keys (SSE-S3) Scroll down to the Bucket Key section: Select Enable Then click Create bucket After creation, you will see the result as shown below: Next, we will proceed to create and configure RDS.\n"},{"uri":"/2-prerequiste/","title":"Preparation Steps","tags":[],"description":"","content":" To complete this workshop effectively, you should have basic knowledge of VPC, EC2, RDS and Route 53.\nBelow are some lab exercises that can help you prepare:\nBasic Networking with Amazon VPC Basic Compute with Amazon EC2 Basic Database Concepts with Amazon RDS Hybrid DNS Management with Amazon Route 53 These labs will provide the foundational knowledge needed to successfully deploy the web application throughout this workshop.\nContents Prepare VPC and EC2 Create S3 Create RDS Download Source Code and Package into JAR File Configure Route 53 "},{"uri":"/2-prerequiste/2.3-createrds/","title":"Create RDS","tags":[],"description":"","content":"Create RDS In this step, we will create an RDS instance.\nThis is a crucial step in preparing to deploy our application data to RDS in the upcoming sections.\nGo to the RDS Management Console Click on Databases On the RDS dashboard, click Create database On the Create database page: Under Choose a database creation method, select Standard create Under Engine options, choose MySQL Scroll down to: Templates: select Free tier Availability and durability: will be automatically set to Single-AZ DB instance deployment (1 instance) Scroll down to the database credentials section: Enter a DB instance identifier Set Master username to admin Under Credentials management, choose Self managed Scroll down to the password section: Enter the Master password Re-enter it in Confirm master password In the Connectivity section: Virtual private cloud (VPC): choose Default VPC DB subnet group: choose default Public access: select Yes VPC security group (firewall): choose Choose existing Under Database authentication: Select Password authentication Monitoring defaults to Database Insights – Standard Scroll to the bottom and click Create database Once created, you will see your new database listed with the status Available Click on the newly created database to view its details — take note of the endpoint, which is the URL your application will use to connect Scroll down to Connectivity \u0026amp; security to see that the database runs on port 3306 Open MySQL Community client. You can download it here Click Database Then click Connect to Database In the Connect to database dialog: Connection Method: select Standard Hostname: paste the endpoint from your RDS instance Username: enter admin Click OK, then enter the master password when prompted The MySQL client interface will now show the details of your newly created database Now that we’ve finished setting up RDS, the next step is to download the source code and package it into a .jar file.\n"},{"uri":"/3-deploy-web-to-aws/","title":"Deployment","tags":[],"description":"","content":"In this section, we will deploy the full-stack E-Commerce application for electronic devices to AWS.\nContents 3.1. Deploy source code to S3\n3.2. Configure EC2 and connecting to S3\n3.3. Test the deployed website link\n"},{"uri":"/3-deploy-web-to-aws/3.3-test/","title":"Test the Deployed Website Link","tags":[],"description":"","content":"Access the link you configured to immediately visit your newly deployed website.\nYou can also refer to the following example link:\nshop.huyanh.click\nAfter testing the website, all features are functional and working properly.\n"},{"uri":"/4-conclusion-future/","title":"Conclusion and Future Development","tags":[],"description":"","content":"📌 Conclusion and Future Development 🔍 Conclusion By deploying and comparing the model using Amazon EC2, S3, and RDS with other deployment methods (such as shared hosting, traditional VPS, or PaaS platforms like Heroku), it is clear that AWS offers significant advantages in scalability, flexibility, and resource management.\nEC2 provides powerful and flexible computing capabilities, S3 offers stable and scalable object storage, while RDS simplifies database management with built-in features such as automatic backups, security, and scalability.\nHowever, costs may be higher if resources are not optimized and usage is not monitored regularly.\n🚀 Future Development In the future, the deployment process can be enhanced by integrating a CI/CD pipeline using AWS-native services such as:\nAWS CodePipeline AWS CodeBuild AWS CodeDeploy These services allow automation of the build, test, and deployment processes, reducing manual operations and speeding up feature releases.\nMoreover, adopting Infrastructure as Code (IaC) with AWS CloudFormation or Terraform will improve automation, ensure consistency across environments, and align with modern DevOps practices.\n📊 Deployment Comparison Table Criteria AWS (EC2 + S3 + RDS) VPS / Shared Hosting Heroku / Vercel / PaaS Performance High Medium / Limited Depends on plan Scalability Excellent (Auto Scaling) Manual Good (plan-based) System Management Self-managed (more control) Limited access Fully managed Configuration Flexibility Very flexible Limited Limited CI/CD Integration with AWS Deep integration (CodeBuild…) Difficult or unavailable Built-in integration Cost Pay-as-you-use Low Free / Expensive (based on plan) Suitable for large applications ✅ ❌ ❌ / Moderate Suitable for learning / MVP ✅ (with Free Tier) ✅ ✅ "},{"uri":"/2-prerequiste/2.4-download-source-convert-jar/","title":"Download Source Code and Package into JAR File","tags":[],"description":"","content":"Download Source Code and Package into JAR File In this step, we will download the source code and package it into a JAR file. This is an important preparation step before deploying the source code to S3.\nGo to the GitHub repository interface. Click Download Zip. After downloading, open the application.properties file and configure it as follows: spring.datasource.url= ----urlRDSdatabase---- spring.datasource.username= -----yourUsername---- spring.datasource.password= ----yourPassword----- The url should be taken from the RDS database that was previously created. The username and password were also defined during the initial RDS setup. Package the project into a JAR file. You can refer to this guide for detailed instructions on how to package into a JAR file. Now that we’ve completed downloading the source code and packaging it into a JAR file, in the next step, we will proceed to configure Route53.\n"},{"uri":"/2-prerequiste/2.5-route53config/","title":"Configure Route 53","tags":[],"description":"","content":"Configure Route 53 In this step, we will configure Route 53. This is the final step of the preparation phase.\nGo to the domain management interface. Click Register domains. The domain management interface will appear: In the \u0026ldquo;Check availability for a domain\u0026rdquo; section, enter the desired domain name, then click Search. Once you find a suitable domain, click Select. Finally, click Proceed to checkout. In the Pricing section, click Next. Review all the details before submitting. Scroll to the bottom of the page, check the box to agree with the terms of service, and click Submit. Once registration is successful, you will see the information of the newly created domain. Click on the newly created domain to view its detailed parameters. We have now completed the Route 53 configuration. In the next section, we will proceed with the deployment steps.\n"},{"uri":"/5-cleanup/","title":"Clean Up Resources","tags":[],"description":"","content":"We will follow the steps below to delete the resources created during this practical exercise.\nDelete EC2 Instance Go to the EC2 Management Console\nClick Instances Select the instance you want to delete Click Instance state Click Terminate instance, then click Terminate to confirm Delete S3 Bucket Go to the S3 Management Console\nSelect the S3 bucket created during this exercise Click Empty Type permanently delete, then click Empty to remove all objects in the bucket Delete RDS Go to the RDS Management Console Select the database you want to delete Click Actions Click Delete In the confirmation section, check the box to acknowledge the service terms Enter delete me to confirm deletion of the endpoints Click Delete to proceed "},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]